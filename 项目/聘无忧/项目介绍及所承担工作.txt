时间： 2018.5 - 2018.8
项目介绍：本系统实现招聘流程的管理。前端使用React框架，后端使用egg框架实现，数据库使用mysql。

本人承担工作： 实现egg框架的搭建，数据库表的设计和接口分析与定义。

项目中遇到的难点和解决方法：
浏览器调后端返回200，可是没有数据，请求header中Access-Control-Allow-Origin
原因：跨域问题
解决方法：
在plugin.js中配置cors,通过npm i egg-cors --save安装相应的包
exports.cors = {
  enable: true,
  package: 'egg-cors',
};

在config.default.js中配置：
config.cors = {
  origin: '*',
  allowMethod: 'GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS',
};


技术：
1）连接数据库  sequelize，在plugin.js中配置：
exports.sequelize = {
  enable: true,
  package: 'egg-sequelize',
};
即可使用。在config.default.js文件中配置
  config.sequelize = {
    // support: mysql, mariadb, postgres, mssql
    dialect: 'mysql',
    // 数据库名
    database: 'RESUMEDATA',
    // host
    host: '127.0.0.1',
    // 端口号
    port: '3306',
    // 用户名
    username: 'root',
    // 密码
    password: 'admin123',
  };

2) 各个文件作用
router -> controller -> service -> model
router: 统一配置Url路由规则，可以避免路由规则散落在多个地方，从而出现未知的冲突，集中在一起我们可以更方便的来查看全局的路由规则。
controller: 用于解析用户输入，处理返回相应的结果。
1）获取用户通过 HTTP 传递过来的请求参数。
2）校验、组装参数。
3）调用 Service 进行业务处理，必要时处理转换 Service 的返回结果，让它适应用户的需求。
4）通过 HTTP 将结果响应给用户。

service： 编写一些业务逻辑
1）保持 Controller 中的逻辑更加简洁。
2）保持业务逻辑的独立性，抽象出来的 Service 可以被多个 Controller 重复调用。
3）将逻辑和展现分离，更容易编写测试用例，测试用例的编写具体可以查看这里。

model: 写一些sql,调用数据库。
自带方法： this.create  this.findAll
自己定义sql： app.model.query('自己写的sql')